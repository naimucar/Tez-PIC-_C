CCS PCM C Compiler, Version 4.038, 62930               18-May-08 08:48

               Filename: C:\OKUL\TEZ\PÝC C\PROGRAM_10\keypad.lst

               ROM used: 508 words (6%)
                         Largest free fragment is 2048
               RAM used: 9 (2%) at main() level
                         18 (5%) worst case
               Stack:    4 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   1C9
0003:  NOP
.................... #include<16f877.h> 
.................... //////// Standard Header file for the PIC16F877 device //////////////// 
.................... #device PIC16F877 
.................... #list 
....................  
.................... #fuses XT,NOWDT,NOPROTECT 
.................... #use delay(clock=4000000) 
*
002C:  MOVLW  24
002D:  MOVWF  04
002E:  BCF    03.7
002F:  MOVF   00,W
0030:  BTFSC  03.2
0031:  GOTO   040
0032:  MOVLW  01
0033:  MOVWF  78
0034:  CLRF   77
0035:  DECFSZ 77,F
0036:  GOTO   035
0037:  DECFSZ 78,F
0038:  GOTO   034
0039:  MOVLW  4A
003A:  MOVWF  77
003B:  DECFSZ 77,F
003C:  GOTO   03B
003D:  GOTO   03E
003E:  DECFSZ 00,F
003F:  GOTO   032
0040:  RETLW  00
.................... #include<lcd420.c>                
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #byte lcd = 6                        // This puts the entire structure 
....................                                      // on to port B (at address 6) 
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_b(LCD_READ); 
*
004E:  MOVLW  F0
004F:  BSF    03.5
0050:  MOVWF  06
....................       lcd.rw = 1; 
0051:  BCF    03.5
0052:  BSF    06.2
....................       delay_cycles(1); 
0053:  NOP
....................       lcd.enable = 1; 
0054:  BSF    06.0
....................       delay_cycles(1); 
0055:  NOP
....................       high = lcd.data; 
0056:  MOVF   06,W
0057:  SWAPF  06,W
0058:  ANDLW  0F
0059:  MOVWF  2A
....................       lcd.enable = 0; 
005A:  BCF    06.0
....................       delay_cycles(1); 
005B:  NOP
....................       lcd.enable = 1; 
005C:  BSF    06.0
....................       delay_us(1); 
005D:  NOP
....................       low = lcd.data; 
005E:  MOVF   06,W
005F:  SWAPF  06,W
0060:  ANDLW  0F
0061:  MOVWF  29
....................       lcd.enable = 0; 
0062:  BCF    06.0
....................       set_tris_b(LCD_WRITE); 
0063:  MOVLW  00
0064:  BSF    03.5
0065:  MOVWF  06
....................       return( (high<<4) | low); 
0066:  BCF    03.5
0067:  SWAPF  2A,W
0068:  MOVWF  77
0069:  MOVLW  F0
006A:  ANDWF  77,F
006B:  MOVF   77,W
006C:  IORWF  29,W
006D:  MOVWF  78
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
0041:  SWAPF  2A,W
0042:  ANDLW  F0
0043:  MOVWF  77
0044:  MOVLW  0F
0045:  ANDWF  06,W
0046:  IORWF  77,W
0047:  MOVWF  06
....................       delay_cycles(1); 
0048:  NOP
....................       lcd.enable = 1; 
0049:  BSF    06.0
....................       delay_us(2); 
004A:  GOTO   04B
....................       lcd.enable = 0; 
004B:  BCF    06.0
.................... } 
004C:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
004D:  BCF    06.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
*
006E:  MOVF   78,W
006F:  MOVWF  29
0070:  BTFSC  29.7
0071:  GOTO   04E
....................       lcd.rs = address; 
0072:  BTFSS  27.0
0073:  BCF    06.1
0074:  BTFSC  27.0
0075:  BSF    06.1
....................       delay_cycles(1); 
0076:  NOP
....................       lcd.rw = 0; 
0077:  BCF    06.2
....................       delay_cycles(1); 
0078:  NOP
....................       lcd.enable = 0; 
0079:  BCF    06.0
....................       lcd_send_nibble(n >> 4); 
007A:  SWAPF  28,W
007B:  MOVWF  29
007C:  MOVLW  0F
007D:  ANDWF  29,F
007E:  MOVF   29,W
007F:  MOVWF  2A
0080:  CALL   041
....................       lcd_send_nibble(n & 0xf); 
0081:  MOVF   28,W
0082:  ANDLW  0F
0083:  MOVWF  29
0084:  MOVWF  2A
0085:  CALL   041
.................... } 
0086:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_b(LCD_WRITE); 
0087:  MOVLW  00
0088:  BSF    03.5
0089:  MOVWF  06
....................     lcd.rs = 0; 
008A:  BCF    03.5
008B:  BCF    06.1
....................     lcd.rw = 0; 
008C:  BCF    06.2
....................     lcd.enable = 0; 
008D:  BCF    06.0
....................     delay_ms(15); 
008E:  MOVLW  0F
008F:  MOVWF  24
0090:  CALL   02C
....................     for(i=1;i<=3;++i) { 
0091:  MOVLW  01
0092:  MOVWF  22
0093:  MOVF   22,W
0094:  SUBLW  03
0095:  BTFSS  03.0
0096:  GOTO   09F
....................        lcd_send_nibble(3); 
0097:  MOVLW  03
0098:  MOVWF  2A
0099:  CALL   041
....................        delay_ms(5); 
009A:  MOVLW  05
009B:  MOVWF  24
009C:  CALL   02C
....................     } 
009D:  INCF   22,F
009E:  GOTO   093
....................     lcd_send_nibble(2); 
009F:  MOVLW  02
00A0:  MOVWF  2A
00A1:  CALL   041
....................     for(i=0;i<=3;++i) 
00A2:  CLRF   22
00A3:  MOVF   22,W
00A4:  SUBLW  03
00A5:  BTFSS  03.0
00A6:  GOTO   0B0
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
00A7:  MOVF   22,W
00A8:  CALL   004
00A9:  MOVWF  23
00AA:  CLRF   27
00AB:  MOVF   23,W
00AC:  MOVWF  28
00AD:  CALL   04D
00AE:  INCF   22,F
00AF:  GOTO   0A3
.................... } 
00B0:  BCF    0A.3
00B1:  BCF    0A.4
00B2:  GOTO   1D4 (RETURN)
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
00B3:  MOVLW  01
00B4:  SUBWF  25,W
00B5:  ADDLW  FC
00B6:  BTFSC  03.0
00B7:  GOTO   0C6
00B8:  ADDLW  04
00B9:  GOTO   0CE
....................      case 1 : address=0x80;break; 
00BA:  MOVLW  80
00BB:  MOVWF  26
00BC:  GOTO   0C6
....................      case 2 : address=0xc0;break; 
00BD:  MOVLW  C0
00BE:  MOVWF  26
00BF:  GOTO   0C6
....................      case 3 : address=0x94;break; 
00C0:  MOVLW  94
00C1:  MOVWF  26
00C2:  GOTO   0C6
....................      case 4 : address=0xd4;break; 
00C3:  MOVLW  D4
00C4:  MOVWF  26
00C5:  GOTO   0C6
....................    } 
....................    address+=x-1; 
00C6:  MOVLW  01
00C7:  SUBWF  24,W
00C8:  ADDWF  26,F
....................    lcd_send_byte(0,address); 
00C9:  CLRF   27
00CA:  MOVF   26,W
00CB:  MOVWF  28
00CC:  CALL   04D
.................... } 
00CD:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
*
00D6:  MOVF   23,W
00D7:  XORLW  0C
00D8:  BTFSC  03.2
00D9:  GOTO   0E1
00DA:  XORLW  06
00DB:  BTFSC  03.2
00DC:  GOTO   0EB
00DD:  XORLW  02
00DE:  BTFSC  03.2
00DF:  GOTO   0F2
00E0:  GOTO   0F7
....................      case '\f'   : lcd_send_byte(0,1); 
00E1:  CLRF   27
00E2:  MOVLW  01
00E3:  MOVWF  28
00E4:  CALL   04D
....................                    lcdline=1; 
00E5:  MOVLW  01
00E6:  MOVWF  20
....................                    delay_ms(2); 
00E7:  MOVLW  02
00E8:  MOVWF  24
00E9:  CALL   02C
....................                                            break; 
00EA:  GOTO   0FD
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
00EB:  INCF   20,F
00EC:  MOVLW  01
00ED:  MOVWF  24
00EE:  MOVF   20,W
00EF:  MOVWF  25
00F0:  CALL   0B3
00F1:  GOTO   0FD
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
00F2:  CLRF   27
00F3:  MOVLW  10
00F4:  MOVWF  28
00F5:  CALL   04D
00F6:  GOTO   0FD
....................      default     : lcd_send_byte(1,c);     break; 
00F7:  MOVLW  01
00F8:  MOVWF  27
00F9:  MOVF   23,W
00FA:  MOVWF  28
00FB:  CALL   04D
00FC:  GOTO   0FD
....................    } 
.................... } 
00FD:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #define SAT1 PIN_D0 
.................... #define SAT2 PIN_D1 
.................... #define SAT3 PIN_D2 
.................... #define SUT1 PIN_D4 
.................... #define SUT2 PIN_D5                         
.................... #define SUT3 PIN_D6 
.................... #define SUT4 PIN_D7 
....................  
.................... char KEY_PAD()    
.................... { 
.................... set_tris_d (0x00);  
00FE:  MOVLW  00
00FF:  BSF    03.5
0100:  MOVWF  08
....................  
.................... output_low(SUT1); 
0101:  BCF    08.4
0102:  BCF    03.5
0103:  BCF    08.4
.................... output_high(SUT2);                  
0104:  BSF    03.5
0105:  BCF    08.5
0106:  BCF    03.5
0107:  BSF    08.5
.................... output_high(SUT3);  
0108:  BSF    03.5
0109:  BCF    08.6
010A:  BCF    03.5
010B:  BSF    08.6
.................... output_high(SUT4);  
010C:  BSF    03.5
010D:  BCF    08.7
010E:  BCF    03.5
010F:  BSF    08.7
....................  
.................... if (input(SAT1)==0) 
0110:  BSF    03.5
0111:  BSF    08.0
0112:  BCF    03.5
0113:  BTFSC  08.0
0114:  GOTO   11B
....................                    {delay_ms(20);return '1';}  
0115:  MOVLW  14
0116:  MOVWF  24
0117:  CALL   02C
0118:  MOVLW  31
0119:  MOVWF  78
011A:  GOTO   1C6
.................... if (input(SAT2)==0) 
011B:  BSF    03.5
011C:  BSF    08.1
011D:  BCF    03.5
011E:  BTFSC  08.1
011F:  GOTO   126
....................                    {delay_ms(20);return '2';} 
0120:  MOVLW  14
0121:  MOVWF  24
0122:  CALL   02C
0123:  MOVLW  32
0124:  MOVWF  78
0125:  GOTO   1C6
.................... if (input(SAT3)==0) 
0126:  BSF    03.5
0127:  BSF    08.2
0128:  BCF    03.5
0129:  BTFSC  08.2
012A:  GOTO   131
....................                    {delay_ms(20);return '3';} 
012B:  MOVLW  14
012C:  MOVWF  24
012D:  CALL   02C
012E:  MOVLW  33
012F:  MOVWF  78
0130:  GOTO   1C6
....................  
.................... output_high(SUT1); 
0131:  BSF    03.5
0132:  BCF    08.4
0133:  BCF    03.5
0134:  BSF    08.4
.................... output_low(SUT2); 
0135:  BSF    03.5
0136:  BCF    08.5
0137:  BCF    03.5
0138:  BCF    08.5
.................... output_high(SUT3); 
0139:  BSF    03.5
013A:  BCF    08.6
013B:  BCF    03.5
013C:  BSF    08.6
.................... output_high(SUT4);  
013D:  BSF    03.5
013E:  BCF    08.7
013F:  BCF    03.5
0140:  BSF    08.7
....................  
.................... if (input(SAT1)==0) 
0141:  BSF    03.5
0142:  BSF    08.0
0143:  BCF    03.5
0144:  BTFSC  08.0
0145:  GOTO   14C
....................                    {delay_ms(20);return '4';} 
0146:  MOVLW  14
0147:  MOVWF  24
0148:  CALL   02C
0149:  MOVLW  34
014A:  MOVWF  78
014B:  GOTO   1C6
.................... if (input(SAT2)==0) 
014C:  BSF    03.5
014D:  BSF    08.1
014E:  BCF    03.5
014F:  BTFSC  08.1
0150:  GOTO   157
....................                    {delay_ms(20);return '5';} 
0151:  MOVLW  14
0152:  MOVWF  24
0153:  CALL   02C
0154:  MOVLW  35
0155:  MOVWF  78
0156:  GOTO   1C6
.................... if (input(SAT3)==0) 
0157:  BSF    03.5
0158:  BSF    08.2
0159:  BCF    03.5
015A:  BTFSC  08.2
015B:  GOTO   162
....................                    {delay_ms(20);return '6';} 
015C:  MOVLW  14
015D:  MOVWF  24
015E:  CALL   02C
015F:  MOVLW  36
0160:  MOVWF  78
0161:  GOTO   1C6
....................  
.................... output_high(SUT1); 
0162:  BSF    03.5
0163:  BCF    08.4
0164:  BCF    03.5
0165:  BSF    08.4
.................... output_high(SUT2); 
0166:  BSF    03.5
0167:  BCF    08.5
0168:  BCF    03.5
0169:  BSF    08.5
.................... output_low(SUT3); 
016A:  BSF    03.5
016B:  BCF    08.6
016C:  BCF    03.5
016D:  BCF    08.6
.................... output_high(SUT4);       
016E:  BSF    03.5
016F:  BCF    08.7
0170:  BCF    03.5
0171:  BSF    08.7
.................... if (input(SAT1)==0) 
0172:  BSF    03.5
0173:  BSF    08.0
0174:  BCF    03.5
0175:  BTFSC  08.0
0176:  GOTO   17D
....................                    {delay_ms(20);return '7';} 
0177:  MOVLW  14
0178:  MOVWF  24
0179:  CALL   02C
017A:  MOVLW  37
017B:  MOVWF  78
017C:  GOTO   1C6
.................... if (input(SAT2)==0) 
017D:  BSF    03.5
017E:  BSF    08.1
017F:  BCF    03.5
0180:  BTFSC  08.1
0181:  GOTO   188
....................                    {delay_ms(20);return '8';}         
0182:  MOVLW  14
0183:  MOVWF  24
0184:  CALL   02C
0185:  MOVLW  38
0186:  MOVWF  78
0187:  GOTO   1C6
.................... if (input(SAT3)==0) 
0188:  BSF    03.5
0189:  BSF    08.2
018A:  BCF    03.5
018B:  BTFSC  08.2
018C:  GOTO   193
....................                    {delay_ms(20);return '9';} 
018D:  MOVLW  14
018E:  MOVWF  24
018F:  CALL   02C
0190:  MOVLW  39
0191:  MOVWF  78
0192:  GOTO   1C6
....................  
.................... output_high(SUT1); 
0193:  BSF    03.5
0194:  BCF    08.4
0195:  BCF    03.5
0196:  BSF    08.4
.................... output_high(SUT2); 
0197:  BSF    03.5
0198:  BCF    08.5
0199:  BCF    03.5
019A:  BSF    08.5
.................... output_high(SUT3); 
019B:  BSF    03.5
019C:  BCF    08.6
019D:  BCF    03.5
019E:  BSF    08.6
.................... output_low(SUT4);       
019F:  BSF    03.5
01A0:  BCF    08.7
01A1:  BCF    03.5
01A2:  BCF    08.7
.................... if (input(SAT1)==0) 
01A3:  BSF    03.5
01A4:  BSF    08.0
01A5:  BCF    03.5
01A6:  BTFSC  08.0
01A7:  GOTO   1AE
....................                    {delay_ms(20);return '*';} 
01A8:  MOVLW  14
01A9:  MOVWF  24
01AA:  CALL   02C
01AB:  MOVLW  2A
01AC:  MOVWF  78
01AD:  GOTO   1C6
.................... if (input(SAT2)==0) 
01AE:  BSF    03.5
01AF:  BSF    08.1
01B0:  BCF    03.5
01B1:  BTFSC  08.1
01B2:  GOTO   1B9
....................                    {delay_ms(20);return '0';} 
01B3:  MOVLW  14
01B4:  MOVWF  24
01B5:  CALL   02C
01B6:  MOVLW  30
01B7:  MOVWF  78
01B8:  GOTO   1C6
.................... if (input(SAT3)==0) 
01B9:  BSF    03.5
01BA:  BSF    08.2
01BB:  BCF    03.5
01BC:  BTFSC  08.2
01BD:  GOTO   1C4
....................                    {delay_ms(20);return '#';} 
01BE:  MOVLW  14
01BF:  MOVWF  24
01C0:  CALL   02C
01C1:  MOVLW  23
01C2:  MOVWF  78
01C3:  GOTO   1C6
....................  
.................... return 0;         
01C4:  MOVLW  00
01C5:  MOVWF  78
.................... } 
01C6:  BCF    0A.3
01C7:  BCF    0A.4
01C8:  GOTO   1E2 (RETURN)
....................  
....................  void main()                                       
.................... { 
01C9:  CLRF   04
01CA:  BCF    03.7
01CB:  MOVLW  1F
01CC:  ANDWF  03,F
01CD:  BSF    03.5
01CE:  BSF    1F.0
01CF:  BSF    1F.1
01D0:  BSF    1F.2
01D1:  BCF    1F.3
.................... char oku; 
.................... lcd_init();   
01D2:  BCF    03.5
01D3:  GOTO   087
.................... delay_ms(20); 
01D4:  MOVLW  14
01D5:  MOVWF  24
01D6:  CALL   02C
.................... lcd_putc("\fBiR TUSA BASIN ");                                             
01D7:  CLRF   22
01D8:  MOVF   22,W
01D9:  CALL   00C
01DA:  IORLW  00
01DB:  BTFSC  03.2
01DC:  GOTO   1E1
01DD:  INCF   22,F
01DE:  MOVWF  23
01DF:  CALL   0D6
01E0:  GOTO   1D8
....................  while(1) 
.................... { 
.................... oku=KEY_PAD(); 
01E1:  GOTO   0FE
01E2:  MOVF   78,W
01E3:  MOVWF  21
.................... lcd_gotoxy(1,2); 
01E4:  MOVLW  01
01E5:  MOVWF  24
01E6:  MOVLW  02
01E7:  MOVWF  25
01E8:  CALL   0B3
.................... printf(lcd_putc,"key=%c",oku);  
01E9:  CLRF   22
01EA:  MOVF   22,W
01EB:  CALL   021
01EC:  INCF   22,F
01ED:  MOVWF  77
01EE:  MOVWF  23
01EF:  CALL   0D6
01F0:  MOVLW  04
01F1:  SUBWF  22,W
01F2:  BTFSS  03.2
01F3:  GOTO   1EA
01F4:  MOVF   21,W
01F5:  MOVWF  23
01F6:  CALL   0D6
.................... delay_ms(10); 
01F7:  MOVLW  0A
01F8:  MOVWF  24
01F9:  CALL   02C
....................  } 
01FA:  GOTO   1E1
....................  
....................     
....................  
.................... }                                   
01FB:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT NOPROTECT BROWNOUT NOLVP NOCPD NOWRT NODEBUG
