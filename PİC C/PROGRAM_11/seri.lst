CCS PCM C Compiler, Version 4.038, 62930               18-May-08 08:49

               Filename: C:\OKUL\TEZ\PÝC C\PROGRAM_11\seri.lst

               ROM used: 701 words (9%)
                         Largest free fragment is 2048
               RAM used: 99 (27%) at main() level
                         115 (31%) worst case
               Stack:    7 worst case (2 in main + 5 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   200
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  MOVLW  8C
001A:  MOVWF  04
001B:  BTFSS  00.5
001C:  GOTO   01F
001D:  BTFSC  0C.5
001E:  GOTO   032
001F:  MOVF   22,W
0020:  MOVWF  04
0021:  MOVF   23,W
0022:  MOVWF  77
0023:  MOVF   24,W
0024:  MOVWF  78
0025:  MOVF   25,W
0026:  MOVWF  79
0027:  MOVF   26,W
0028:  MOVWF  7A
0029:  MOVF   27,W
002A:  MOVWF  7B
002B:  MOVF   20,W
002C:  MOVWF  0A
002D:  SWAPF  21,W
002E:  MOVWF  03
002F:  SWAPF  7F,F
0030:  SWAPF  7F,W
0031:  RETFIE
0032:  BCF    0A.3
0033:  BCF    0A.4
0034:  GOTO   188
.................... #include<16f877.h> 
.................... //////// Standard Header file for the PIC16F877 device //////////////// 
.................... #device PIC16F877 
.................... #list 
....................  
.................... #fuses nowdt,xt 
.................... #use delay(clock=4000000) 
*
0111:  MOVLW  1A
0112:  MOVWF  04
0113:  BSF    03.7
0114:  MOVF   00,W
0115:  BTFSC  03.2
0116:  GOTO   125
0117:  MOVLW  01
0118:  MOVWF  78
0119:  CLRF   77
011A:  DECFSZ 77,F
011B:  GOTO   11A
011C:  DECFSZ 78,F
011D:  GOTO   119
011E:  MOVLW  4A
011F:  MOVWF  77
0120:  DECFSZ 77,F
0121:  GOTO   120
0122:  GOTO   123
0123:  DECFSZ 00,F
0124:  GOTO   117
0125:  RETLW  00
.................... #include<lcd420.c>  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #byte lcd = 6                        // This puts the entire structure 
....................                                      // on to port B (at address 6) 
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_b(LCD_READ); 
*
00B3:  MOVLW  F0
00B4:  BSF    03.5
00B5:  MOVWF  06
....................       lcd.rw = 1; 
00B6:  BCF    03.5
00B7:  BSF    06.2
....................       delay_cycles(1); 
00B8:  NOP
....................       lcd.enable = 1; 
00B9:  BSF    06.0
....................       delay_cycles(1); 
00BA:  NOP
....................       high = lcd.data; 
00BB:  MOVF   06,W
00BC:  SWAPF  06,W
00BD:  ANDLW  0F
00BE:  BSF    03.6
00BF:  MOVWF  20
....................       lcd.enable = 0; 
00C0:  BCF    03.6
00C1:  BCF    06.0
....................       delay_cycles(1); 
00C2:  NOP
....................       lcd.enable = 1; 
00C3:  BSF    06.0
....................       delay_us(1); 
00C4:  NOP
....................       low = lcd.data; 
00C5:  MOVF   06,W
00C6:  SWAPF  06,W
00C7:  ANDLW  0F
00C8:  BSF    03.6
00C9:  MOVWF  1F
....................       lcd.enable = 0; 
00CA:  BCF    03.6
00CB:  BCF    06.0
....................       set_tris_b(LCD_WRITE); 
00CC:  MOVLW  00
00CD:  BSF    03.5
00CE:  MOVWF  06
....................       return( (high<<4) | low); 
00CF:  BCF    03.5
00D0:  BSF    03.6
00D1:  SWAPF  20,W
00D2:  MOVWF  77
00D3:  MOVLW  F0
00D4:  ANDWF  77,F
00D5:  MOVF   77,W
00D6:  IORWF  1F,W
00D7:  MOVWF  78
.................... } 
00D8:  BCF    03.6
00D9:  RETLW  00
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
00DA:  BSF    03.6
00DB:  SWAPF  20,W
00DC:  ANDLW  F0
00DD:  MOVWF  77
00DE:  MOVLW  0F
00DF:  BCF    03.6
00E0:  ANDWF  06,W
00E1:  IORWF  77,W
00E2:  MOVWF  06
....................       delay_cycles(1); 
00E3:  NOP
....................       lcd.enable = 1; 
00E4:  BSF    06.0
....................       delay_us(2); 
00E5:  GOTO   0E6
....................       lcd.enable = 0; 
00E6:  BCF    06.0
.................... } 
00E7:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
00E8:  BCF    06.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
00E9:  CALL   0B3
00EA:  MOVF   78,W
00EB:  BSF    03.6
00EC:  MOVWF  1F
00ED:  BTFSS  1F.7
00EE:  GOTO   0F1
00EF:  BCF    03.6
00F0:  GOTO   0E9
....................       lcd.rs = address; 
00F1:  BTFSC  1D.0
00F2:  GOTO   0F6
00F3:  BCF    03.6
00F4:  BCF    06.1
00F5:  BSF    03.6
00F6:  BTFSS  1D.0
00F7:  GOTO   0FB
00F8:  BCF    03.6
00F9:  BSF    06.1
00FA:  BSF    03.6
....................       delay_cycles(1); 
00FB:  NOP
....................       lcd.rw = 0; 
00FC:  BCF    03.6
00FD:  BCF    06.2
....................       delay_cycles(1); 
00FE:  NOP
....................       lcd.enable = 0; 
00FF:  BCF    06.0
....................       lcd_send_nibble(n >> 4); 
0100:  BSF    03.6
0101:  SWAPF  1E,W
0102:  MOVWF  1F
0103:  MOVLW  0F
0104:  ANDWF  1F,F
0105:  MOVF   1F,W
0106:  MOVWF  20
0107:  BCF    03.6
0108:  CALL   0DA
....................       lcd_send_nibble(n & 0xf); 
0109:  BSF    03.6
010A:  MOVF   1E,W
010B:  ANDLW  0F
010C:  MOVWF  1F
010D:  MOVWF  20
010E:  BCF    03.6
010F:  CALL   0DA
.................... } 
0110:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_b(LCD_WRITE); 
*
021A:  MOVLW  00
021B:  BSF    03.5
021C:  MOVWF  06
....................     lcd.rs = 0; 
021D:  BCF    03.5
021E:  BCF    06.1
....................     lcd.rw = 0; 
021F:  BCF    06.2
....................     lcd.enable = 0; 
0220:  BCF    06.0
0221:  CLRF   28
0222:  BTFSC  0B.7
0223:  BSF    28.7
0224:  BCF    0B.7
....................     delay_ms(15); 
0225:  MOVLW  0F
0226:  BSF    03.6
0227:  MOVWF  1A
0228:  BCF    03.6
0229:  CALL   111
022A:  BTFSC  28.7
022B:  BSF    0B.7
....................     for(i=1;i<=3;++i) { 
022C:  MOVLW  01
022D:  BSF    03.6
022E:  MOVWF  10
022F:  MOVF   10,W
0230:  SUBLW  03
0231:  BTFSS  03.0
0232:  GOTO   24D
0233:  BCF    03.6
0234:  CLRF   28
0235:  BTFSC  0B.7
0236:  BSF    28.7
0237:  BCF    0B.7
....................        lcd_send_nibble(3); 
0238:  MOVLW  03
0239:  BSF    03.6
023A:  MOVWF  20
023B:  BCF    03.6
023C:  CALL   0DA
023D:  BTFSC  28.7
023E:  BSF    0B.7
023F:  CLRF   28
0240:  BTFSC  0B.7
0241:  BSF    28.7
0242:  BCF    0B.7
....................        delay_ms(5); 
0243:  MOVLW  05
0244:  BSF    03.6
0245:  MOVWF  1A
0246:  BCF    03.6
0247:  CALL   111
0248:  BTFSC  28.7
0249:  BSF    0B.7
....................     } 
024A:  BSF    03.6
024B:  INCF   10,F
024C:  GOTO   22F
024D:  BCF    03.6
024E:  CLRF   28
024F:  BTFSC  0B.7
0250:  BSF    28.7
0251:  BCF    0B.7
....................     lcd_send_nibble(2); 
0252:  MOVLW  02
0253:  BSF    03.6
0254:  MOVWF  20
0255:  BCF    03.6
0256:  CALL   0DA
0257:  BTFSC  28.7
0258:  BSF    0B.7
....................     for(i=0;i<=3;++i) 
0259:  BSF    03.6
025A:  CLRF   10
025B:  MOVF   10,W
025C:  SUBLW  03
025D:  BTFSS  03.0
025E:  GOTO   274
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
025F:  MOVF   10,W
0260:  BCF    03.6
0261:  CALL   035
0262:  BSF    03.6
0263:  MOVWF  11
0264:  BCF    03.6
0265:  CLRF   28
0266:  BTFSC  0B.7
0267:  BSF    28.7
0268:  BCF    0B.7
0269:  BSF    03.6
026A:  CLRF   1D
026B:  MOVF   11,W
026C:  MOVWF  1E
026D:  BCF    03.6
026E:  CALL   0E8
026F:  BTFSC  28.7
0270:  BSF    0B.7
0271:  BSF    03.6
0272:  INCF   10,F
0273:  GOTO   25B
.................... } 
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
*
0126:  MOVLW  01
0127:  BSF    03.6
0128:  SUBWF  1B,W
0129:  ADDLW  FC
012A:  BTFSC  03.0
012B:  GOTO   140
012C:  ADDLW  04
012D:  BCF    03.6
012E:  GOTO   14B
....................      case 1 : address=0x80;break; 
012F:  MOVLW  80
0130:  BSF    03.6
0131:  MOVWF  1C
0132:  GOTO   140
....................      case 2 : address=0xc0;break; 
0133:  MOVLW  C0
0134:  BSF    03.6
0135:  MOVWF  1C
0136:  GOTO   140
....................      case 3 : address=0x94;break; 
0137:  MOVLW  94
0138:  BSF    03.6
0139:  MOVWF  1C
013A:  GOTO   140
....................      case 4 : address=0xd4;break; 
013B:  MOVLW  D4
013C:  BSF    03.6
013D:  MOVWF  1C
013E:  GOTO   140
013F:  BSF    03.6
....................    } 
....................    address+=x-1; 
0140:  MOVLW  01
0141:  SUBWF  1A,W
0142:  ADDWF  1C,F
....................    lcd_send_byte(0,address); 
0143:  CLRF   1D
0144:  MOVF   1C,W
0145:  MOVWF  1E
0146:  BCF    03.6
0147:  CALL   0E8
.................... } 
0148:  BCF    0A.3
0149:  BCF    0A.4
014A:  GOTO   187 (RETURN)
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
*
0153:  BSF    03.6
0154:  MOVF   19,W
0155:  XORLW  0C
0156:  BCF    03.6
0157:  BTFSC  03.2
0158:  GOTO   160
0159:  XORLW  06
015A:  BTFSC  03.2
015B:  GOTO   16E
015C:  XORLW  02
015D:  BTFSC  03.2
015E:  GOTO   178
015F:  GOTO   17F
....................      case '\f'   : lcd_send_byte(0,1); 
0160:  BSF    03.6
0161:  CLRF   1D
0162:  MOVLW  01
0163:  MOVWF  1E
0164:  BCF    03.6
0165:  CALL   0E8
....................                    lcdline=1; 
0166:  MOVLW  01
0167:  MOVWF  29
....................                    delay_ms(2); 
0168:  MOVLW  02
0169:  BSF    03.6
016A:  MOVWF  1A
016B:  BCF    03.6
016C:  CALL   111
....................                                            break; 
016D:  GOTO   187
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
016E:  INCF   29,F
016F:  MOVLW  01
0170:  BSF    03.6
0171:  MOVWF  1A
0172:  BCF    03.6
0173:  MOVF   29,W
0174:  BSF    03.6
0175:  MOVWF  1B
0176:  BCF    03.6
0177:  GOTO   126
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
0178:  BSF    03.6
0179:  CLRF   1D
017A:  MOVLW  10
017B:  MOVWF  1E
017C:  BCF    03.6
017D:  CALL   0E8
017E:  GOTO   187
....................      default     : lcd_send_byte(1,c);     break; 
017F:  MOVLW  01
0180:  BSF    03.6
0181:  MOVWF  1D
0182:  MOVF   19,W
0183:  MOVWF  1E
0184:  BCF    03.6
0185:  CALL   0E8
0186:  GOTO   187
....................    } 
.................... } 
0187:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #use rs232 (baud=9600,xmit=pin_c6,rcv=pin_c7,parity=N,stop=1) 
....................  
.................... char klavye[80]; 
.................... #int_rda 
.................... void serihaber_kesme() 
....................  { 
....................  disable_interrupts(int_rda); 
0188:  BSF    03.5
0189:  BCF    0C.5
....................  output_high(pin_c5);  
018A:  BCF    03.5
018B:  BCF    2A.5
018C:  MOVF   2A,W
018D:  BSF    03.5
018E:  MOVWF  07
018F:  BCF    03.5
0190:  BSF    07.5
*
0211:  MOVLW  FF
0212:  BCF    03.5
0213:  MOVWF  2A
....................  gets(klavye); 
*
0191:  MOVLW  A0
0192:  MOVWF  04
0193:  BCF    03.7
0194:  DECF   04,F
0195:  INCF   04,F
0196:  BTFSS  0C.5
0197:  GOTO   196
0198:  MOVF   1A,W
0199:  MOVWF  00
019A:  MOVLW  0D
019B:  SUBWF  00,W
019C:  BTFSS  03.2
019D:  GOTO   195
019E:  CLRF   00
....................  printf("\n\ryazdýðýnýz metin> %s\n",klavye); 
019F:  BSF    03.6
01A0:  CLRF   17
01A1:  MOVF   17,W
01A2:  BCF    03.6
01A3:  CALL   03D
01A4:  BSF    03.6
01A5:  INCF   17,F
01A6:  MOVWF  77
01A7:  BCF    03.6
01A8:  BTFSS  0C.4
01A9:  GOTO   1A8
01AA:  MOVWF  19
01AB:  MOVLW  14
01AC:  BSF    03.6
01AD:  SUBWF  17,W
01AE:  BTFSS  03.2
01AF:  GOTO   1A1
01B0:  MOVLW  A0
01B1:  MOVWF  04
01B2:  BCF    03.7
01B3:  MOVLW  00
01B4:  IORWF  00,W
01B5:  BTFSC  03.2
01B6:  GOTO   1BF
01B7:  MOVF   00,W
01B8:  BCF    03.6
01B9:  BTFSS  0C.4
01BA:  GOTO   1B9
01BB:  MOVWF  19
01BC:  INCF   04,F
01BD:  BSF    03.6
01BE:  GOTO   1B3
01BF:  MOVLW  0A
01C0:  BCF    03.6
01C1:  BTFSS  0C.4
01C2:  GOTO   1C1
01C3:  MOVWF  19
....................  printf(lcd_putc,"\f%s"klavye);  
01C4:  MOVLW  0C
01C5:  BSF    03.6
01C6:  MOVWF  19
01C7:  BCF    03.6
01C8:  CALL   153
01C9:  MOVLW  A0
01CA:  MOVWF  04
01CB:  BCF    03.7
01CC:  MOVLW  00
01CD:  IORWF  00,W
01CE:  BTFSC  03.2
01CF:  GOTO   1E4
01D0:  BSF    03.6
01D1:  CLRF   18
01D2:  MOVF   04,W
01D3:  MOVWF  17
01D4:  BCF    18.0
01D5:  BTFSC  03.7
01D6:  BSF    18.0
01D7:  MOVF   00,W
01D8:  MOVWF  19
01D9:  BCF    03.6
01DA:  CALL   153
01DB:  BSF    03.6
01DC:  MOVF   17,W
01DD:  MOVWF  04
01DE:  BCF    03.7
01DF:  BTFSC  18.0
01E0:  BSF    03.7
01E1:  INCF   04,F
01E2:  BCF    03.6
01E3:  GOTO   1CC
....................  output_low (pin_c5);  
01E4:  BCF    2A.5
01E5:  MOVF   2A,W
01E6:  BSF    03.5
01E7:  MOVWF  07
01E8:  BCF    03.5
01E9:  BCF    07.5
....................  printf("\n\rklavyeden metin gir ve entere bas>");       
01EA:  BSF    03.6
01EB:  CLRF   17
01EC:  MOVF   17,W
01ED:  BCF    03.6
01EE:  CALL   059
01EF:  BSF    03.6
01F0:  INCF   17,F
01F1:  MOVWF  77
01F2:  BCF    03.6
01F3:  BTFSS  0C.4
01F4:  GOTO   1F3
01F5:  MOVWF  19
01F6:  MOVLW  24
01F7:  BSF    03.6
01F8:  SUBWF  17,W
01F9:  BTFSS  03.2
01FA:  GOTO   1EC
....................   } 
....................  
....................  
01FB:  BCF    03.6
01FC:  BCF    0C.5
01FD:  BCF    0A.3
01FE:  BCF    0A.4
01FF:  GOTO   01F
.................... void main() 
.................... {                                                      
0200:  CLRF   04
0201:  BCF    03.7
0202:  MOVLW  1F
0203:  ANDWF  03,F
0204:  MOVLW  19
0205:  BSF    03.5
0206:  MOVWF  19
0207:  MOVLW  A6
0208:  MOVWF  18
0209:  MOVLW  90
020A:  BCF    03.5
020B:  MOVWF  18
020C:  BSF    03.5
020D:  BSF    1F.0
020E:  BSF    1F.1
020F:  BSF    1F.2
0210:  BCF    1F.3
....................   output_low (pin_c5);  
*
0214:  BCF    2A.5
0215:  MOVF   2A,W
0216:  BSF    03.5
0217:  MOVWF  07
0218:  BCF    03.5
0219:  BCF    07.5
....................   lcd_init(); 
....................    printf("\**********slm*******"); 
*
0274:  MOVLW  0A
0275:  MOVWF  10
0276:  MOVLW  2A
0277:  BCF    03.6
0278:  BTFSS  0C.4
0279:  GOTO   278
027A:  MOVWF  19
027B:  BSF    03.6
027C:  DECFSZ 10,F
027D:  GOTO   276
027E:  MOVLW  73
027F:  BCF    03.6
0280:  BTFSS  0C.4
0281:  GOTO   280
0282:  MOVWF  19
0283:  MOVLW  6C
0284:  BTFSS  0C.4
0285:  GOTO   284
0286:  MOVWF  19
0287:  MOVLW  6D
0288:  BTFSS  0C.4
0289:  GOTO   288
028A:  MOVWF  19
028B:  MOVLW  07
028C:  BSF    03.6
028D:  MOVWF  11
028E:  MOVLW  2A
028F:  BCF    03.6
0290:  BTFSS  0C.4
0291:  GOTO   290
0292:  MOVWF  19
0293:  BSF    03.6
0294:  DECFSZ 11,F
0295:  GOTO   28E
....................     printf("\n\rklavyeden girilen bilgi lcd de görünecek\n\n"); 
0296:  CLRF   10
0297:  MOVF   10,W
0298:  BCF    03.6
0299:  CALL   082
029A:  BSF    03.6
029B:  INCF   10,F
029C:  MOVWF  77
029D:  BCF    03.6
029E:  BTFSS  0C.4
029F:  GOTO   29E
02A0:  MOVWF  19
02A1:  MOVLW  2C
02A2:  BSF    03.6
02A3:  SUBWF  10,W
02A4:  BTFSS  03.2
02A5:  GOTO   297
....................     printf("\n\rklavyeden metin gir ve entere bas>");  
02A6:  CLRF   10
02A7:  MOVF   10,W
02A8:  BCF    03.6
02A9:  CALL   059
02AA:  BSF    03.6
02AB:  INCF   10,F
02AC:  MOVWF  77
02AD:  BCF    03.6
02AE:  BTFSS  0C.4
02AF:  GOTO   2AE
02B0:  MOVWF  19
02B1:  MOVLW  24
02B2:  BSF    03.6
02B3:  SUBWF  10,W
02B4:  BTFSS  03.2
02B5:  GOTO   2A7
....................     enable_interrupts(global); 
02B6:  MOVLW  C0
02B7:  BCF    03.6
02B8:  IORWF  0B,F
....................     while(1) 
.................... { 
....................   enable_interrupts(int_rda); 
02B9:  BSF    03.5
02BA:  BSF    0C.5
.................... } 
02BB:  GOTO   2BA
.................... } 
....................                                                                                  
02BC:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT NOPROTECT BROWNOUT NOLVP NOCPD NOWRT NODEBUG
