CCS PCM C Compiler, Version 4.038, 62930               18-May-08 08:50

               Filename: C:\OKUL\TEZ\PÝC C\PROGRAM_12\mth.lst

               ROM used: 773 words (9%)
                         Largest free fragment is 2048
               RAM used: 15 (4%) at main() level
                         33 (9%) worst case
               Stack:    5 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   1FE
0003:  NOP
.................... #include<16f877.h>    
.................... //////// Standard Header file for the PIC16F877 device //////////////// 
.................... #device PIC16F877 
.................... #list 
....................  
.................... #DEViCE ADC=8                          
.................... #fuses xt,nowdt,NOprotect                        
.................... #use delay(clock=4000000)              
*
0064:  MOVLW  33
0065:  MOVWF  04
0066:  BCF    03.7
0067:  MOVF   00,W
0068:  BTFSC  03.2
0069:  GOTO   078
006A:  MOVLW  01
006B:  MOVWF  78
006C:  CLRF   77
006D:  DECFSZ 77,F
006E:  GOTO   06D
006F:  DECFSZ 78,F
0070:  GOTO   06C
0071:  MOVLW  4A
0072:  MOVWF  77
0073:  DECFSZ 77,F
0074:  GOTO   073
0075:  GOTO   076
0076:  DECFSZ 00,F
0077:  GOTO   06A
0078:  RETLW  00
.................... #include<LCD420.C>                       
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #byte lcd = 6                        // This puts the entire structure 
....................                                      // on to port B (at address 6) 
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_b(LCD_READ); 
*
0086:  MOVLW  F0
0087:  BSF    03.5
0088:  MOVWF  06
....................       lcd.rw = 1; 
0089:  BCF    03.5
008A:  BSF    06.2
....................       delay_cycles(1); 
008B:  NOP
....................       lcd.enable = 1; 
008C:  BSF    06.0
....................       delay_cycles(1); 
008D:  NOP
....................       high = lcd.data; 
008E:  MOVF   06,W
008F:  SWAPF  06,W
0090:  ANDLW  0F
0091:  MOVWF  39
....................       lcd.enable = 0; 
0092:  BCF    06.0
....................       delay_cycles(1); 
0093:  NOP
....................       lcd.enable = 1; 
0094:  BSF    06.0
....................       delay_us(1); 
0095:  NOP
....................       low = lcd.data; 
0096:  MOVF   06,W
0097:  SWAPF  06,W
0098:  ANDLW  0F
0099:  MOVWF  38
....................       lcd.enable = 0; 
009A:  BCF    06.0
....................       set_tris_b(LCD_WRITE); 
009B:  MOVLW  00
009C:  BSF    03.5
009D:  MOVWF  06
....................       return( (high<<4) | low); 
009E:  BCF    03.5
009F:  SWAPF  39,W
00A0:  MOVWF  77
00A1:  MOVLW  F0
00A2:  ANDWF  77,F
00A3:  MOVF   77,W
00A4:  IORWF  38,W
00A5:  MOVWF  78
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
0079:  SWAPF  39,W
007A:  ANDLW  F0
007B:  MOVWF  77
007C:  MOVLW  0F
007D:  ANDWF  06,W
007E:  IORWF  77,W
007F:  MOVWF  06
....................       delay_cycles(1); 
0080:  NOP
....................       lcd.enable = 1; 
0081:  BSF    06.0
....................       delay_us(2); 
0082:  GOTO   083
....................       lcd.enable = 0; 
0083:  BCF    06.0
.................... } 
0084:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0085:  BCF    06.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
*
00A6:  MOVF   78,W
00A7:  MOVWF  38
00A8:  BTFSC  38.7
00A9:  GOTO   086
....................       lcd.rs = address; 
00AA:  BTFSS  36.0
00AB:  BCF    06.1
00AC:  BTFSC  36.0
00AD:  BSF    06.1
....................       delay_cycles(1); 
00AE:  NOP
....................       lcd.rw = 0; 
00AF:  BCF    06.2
....................       delay_cycles(1); 
00B0:  NOP
....................       lcd.enable = 0; 
00B1:  BCF    06.0
....................       lcd_send_nibble(n >> 4); 
00B2:  SWAPF  37,W
00B3:  MOVWF  38
00B4:  MOVLW  0F
00B5:  ANDWF  38,F
00B6:  MOVF   38,W
00B7:  MOVWF  39
00B8:  CALL   079
....................       lcd_send_nibble(n & 0xf); 
00B9:  MOVF   37,W
00BA:  ANDLW  0F
00BB:  MOVWF  38
00BC:  MOVWF  39
00BD:  CALL   079
.................... } 
00BE:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_b(LCD_WRITE); 
00BF:  MOVLW  00
00C0:  BSF    03.5
00C1:  MOVWF  06
....................     lcd.rs = 0; 
00C2:  BCF    03.5
00C3:  BCF    06.1
....................     lcd.rw = 0; 
00C4:  BCF    06.2
....................     lcd.enable = 0; 
00C5:  BCF    06.0
....................     delay_ms(15); 
00C6:  MOVLW  0F
00C7:  MOVWF  33
00C8:  CALL   064
....................     for(i=1;i<=3;++i) { 
00C9:  MOVLW  01
00CA:  MOVWF  28
00CB:  MOVF   28,W
00CC:  SUBLW  03
00CD:  BTFSS  03.0
00CE:  GOTO   0D7
....................        lcd_send_nibble(3); 
00CF:  MOVLW  03
00D0:  MOVWF  39
00D1:  CALL   079
....................        delay_ms(5); 
00D2:  MOVLW  05
00D3:  MOVWF  33
00D4:  CALL   064
....................     } 
00D5:  INCF   28,F
00D6:  GOTO   0CB
....................     lcd_send_nibble(2); 
00D7:  MOVLW  02
00D8:  MOVWF  39
00D9:  CALL   079
....................     for(i=0;i<=3;++i) 
00DA:  CLRF   28
00DB:  MOVF   28,W
00DC:  SUBLW  03
00DD:  BTFSS  03.0
00DE:  GOTO   0E8
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
00DF:  MOVF   28,W
00E0:  CALL   004
00E1:  MOVWF  29
00E2:  CLRF   36
00E3:  MOVF   29,W
00E4:  MOVWF  37
00E5:  CALL   085
00E6:  INCF   28,F
00E7:  GOTO   0DB
.................... } 
00E8:  BCF    0A.3
00E9:  BCF    0A.4
00EA:  GOTO   237 (RETURN)
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
00EB:  MOVLW  01
00EC:  SUBWF  34,W
00ED:  ADDLW  FC
00EE:  BTFSC  03.0
00EF:  GOTO   0FE
00F0:  ADDLW  04
00F1:  GOTO   106
....................      case 1 : address=0x80;break; 
00F2:  MOVLW  80
00F3:  MOVWF  35
00F4:  GOTO   0FE
....................      case 2 : address=0xc0;break; 
00F5:  MOVLW  C0
00F6:  MOVWF  35
00F7:  GOTO   0FE
....................      case 3 : address=0x94;break; 
00F8:  MOVLW  94
00F9:  MOVWF  35
00FA:  GOTO   0FE
....................      case 4 : address=0xd4;break; 
00FB:  MOVLW  D4
00FC:  MOVWF  35
00FD:  GOTO   0FE
....................    } 
....................    address+=x-1; 
00FE:  MOVLW  01
00FF:  SUBWF  33,W
0100:  ADDWF  35,F
....................    lcd_send_byte(0,address); 
0101:  CLRF   36
0102:  MOVF   35,W
0103:  MOVWF  37
0104:  CALL   085
.................... } 
0105:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
*
010E:  MOVF   32,W
010F:  XORLW  0C
0110:  BTFSC  03.2
0111:  GOTO   119
0112:  XORLW  06
0113:  BTFSC  03.2
0114:  GOTO   123
0115:  XORLW  02
0116:  BTFSC  03.2
0117:  GOTO   12A
0118:  GOTO   12F
....................      case '\f'   : lcd_send_byte(0,1); 
0119:  CLRF   36
011A:  MOVLW  01
011B:  MOVWF  37
011C:  CALL   085
....................                    lcdline=1; 
011D:  MOVLW  01
011E:  MOVWF  20
....................                    delay_ms(2); 
011F:  MOVLW  02
0120:  MOVWF  33
0121:  CALL   064
....................                                            break; 
0122:  GOTO   135
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
0123:  INCF   20,F
0124:  MOVLW  01
0125:  MOVWF  33
0126:  MOVF   20,W
0127:  MOVWF  34
0128:  CALL   0EB
0129:  GOTO   135
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
012A:  CLRF   36
012B:  MOVLW  10
012C:  MOVWF  37
012D:  CALL   085
012E:  GOTO   135
....................      default     : lcd_send_byte(1,c);     break; 
012F:  MOVLW  01
0130:  MOVWF  36
0131:  MOVF   32,W
0132:  MOVWF  37
0133:  CALL   085
0134:  GOTO   135
....................    } 
.................... } 
0135:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #define calis output_high(pin_d0);      
.................... #define dur   output_low(pin_d0);    
....................  
.................... void main() 
.................... { 
*
01FE:  CLRF   04
01FF:  BCF    03.7
0200:  MOVLW  1F
0201:  ANDWF  03,F
0202:  BSF    03.5
0203:  BSF    1F.0
0204:  BSF    1F.1
0205:  BSF    1F.2
0206:  BCF    1F.3
....................                                                                                                                                   
.................... unsigned int16 devir,sayac;                                                                                                     
.................... unsigned int8 i,PVM; 
....................  
.................... setup_timer_1(T1_external|T1_div_by_1);    
*
020A:  MOVLW  87
020B:  MOVWF  10
.................... setup_timer_2( T2_DIV_BY_1,249,1 );        
020C:  MOVLW  00
020D:  MOVWF  78
020E:  IORLW  04
020F:  MOVWF  12
0210:  MOVLW  F9
0211:  BSF    03.5
0212:  MOVWF  12
.................... setup_ccp1(ccp_pwm);  
*
0207:  MOVLW  FF
0208:  BCF    03.5
0209:  MOVWF  21
*
0213:  BCF    03.5
0214:  BCF    21.2
0215:  MOVF   21,W
0216:  BSF    03.5
0217:  MOVWF  07
0218:  BCF    03.5
0219:  BCF    07.2
021A:  MOVLW  0C
021B:  MOVWF  17
.................... setup_adc_ports( RA0_ANALOG );      // RA0 kanalýný analog okuma için ayarla 
021C:  BSF    03.5
021D:  BCF    1F.0
021E:  BSF    1F.1
021F:  BSF    1F.2
0220:  BSF    1F.3
.................... setup_adc(ADC_CLOCK_INTERNAL);     // adc için iç saati kullan 
0221:  BCF    03.5
0222:  BSF    1F.6
0223:  BSF    1F.7
0224:  BSF    03.5
0225:  BCF    1F.7
0226:  BCF    03.5
0227:  BSF    1F.0
.................... set_adc_channel(0);                // analog kanalý sýfýrýncý kanal seç 
0228:  MOVLW  00
0229:  MOVWF  78
022A:  MOVF   1F,W
022B:  ANDLW  C7
022C:  IORWF  78,W
022D:  MOVWF  1F
.................... delay_ms(20);                     
022E:  MOVLW  14
022F:  MOVWF  33
0230:  CALL   064
.................... ana_p:  
.................... set_pwm1_duty(0);          
0231:  CLRF   15
.................... dur;                              
0232:  BSF    03.5
0233:  BCF    08.0
0234:  BCF    03.5
0235:  BCF    08.0
.................... lcd_init();                          
0236:  GOTO   0BF
.................... delay_ms(50);                       
0237:  MOVLW  32
0238:  MOVWF  33
0239:  CALL   064
.................... lcd_putc("\f"); 
023A:  CLRF   28
023B:  MOVF   28,W
023C:  CALL   00C
023D:  IORLW  00
023E:  BTFSC  03.2
023F:  GOTO   244
0240:  INCF   28,F
0241:  MOVWF  32
0242:  CALL   10E
0243:  GOTO   23B
.................... delay_ms(50);                  
0244:  MOVLW  32
0245:  MOVWF  33
0246:  CALL   064
.................... lcd_gotoxy(1,1);                      
0247:  MOVLW  01
0248:  MOVWF  33
0249:  MOVWF  34
024A:  CALL   0EB
.................... printf(lcd_putc,"MERHABA " ); 
024B:  CLRF   28
024C:  MOVF   28,W
024D:  CALL   012
024E:  INCF   28,F
024F:  MOVWF  77
0250:  MOVWF  32
0251:  CALL   10E
0252:  MOVLW  08
0253:  SUBWF  28,W
0254:  BTFSS  03.2
0255:  GOTO   24C
.................... delay_ms(50);  
0256:  MOVLW  32
0257:  MOVWF  33
0258:  CALL   064
.................... lcd_gotoxy(1,2);                      
0259:  MOVLW  01
025A:  MOVWF  33
025B:  MOVLW  02
025C:  MOVWF  34
025D:  CALL   0EB
.................... printf(lcd_putc,"STARTA BASIN" ) ;  
025E:  CLRF   28
025F:  MOVF   28,W
0260:  CALL   01F
0261:  INCF   28,F
0262:  MOVWF  77
0263:  MOVWF  32
0264:  CALL   10E
0265:  MOVLW  0C
0266:  SUBWF  28,W
0267:  BTFSS  03.2
0268:  GOTO   25F
....................  do 
....................    {  
....................     if(input(pin_D7)==0) break;       
0269:  BSF    03.5
026A:  BSF    08.7
026B:  BCF    03.5
026C:  BTFSS  08.7
026D:  GOTO   272
....................     delay_ms(50);                    
026E:  MOVLW  32
026F:  MOVWF  33
0270:  CALL   064
....................    }  
.................... while(1); 
.................... lcd_putc("\f");                                   
0271:  GOTO   269
0272:  CLRF   28
0273:  MOVF   28,W
0274:  CALL   00C
0275:  IORLW  00
0276:  BTFSC  03.2
0277:  GOTO   27C
0278:  INCF   28,F
0279:  MOVWF  32
027A:  CALL   10E
027B:  GOTO   273
.................... lcd_putc("MOTOR CALISIYOR");                   
027C:  CLRF   28
027D:  MOVF   28,W
027E:  CALL   030
027F:  IORLW  00
0280:  BTFSC  03.2
0281:  GOTO   286
0282:  INCF   28,F
0283:  MOVWF  32
0284:  CALL   10E
0285:  GOTO   27D
.................... calis;  
0286:  BSF    03.5
0287:  BCF    08.0
0288:  BCF    03.5
0289:  BSF    08.0
.................... lcd_putc("\f");                          
028A:  CLRF   28
028B:  MOVF   28,W
028C:  CALL   00C
028D:  IORLW  00
028E:  BTFSC  03.2
028F:  GOTO   294
0290:  INCF   28,F
0291:  MOVWF  32
0292:  CALL   10E
0293:  GOTO   28B
.................... for(;;) 
....................  { 
....................   pvm=read_adc();                     
0294:  BSF    1F.2
0295:  BTFSC  1F.2
0296:  GOTO   295
0297:  MOVF   1E,W
0298:  MOVWF  27
....................   delay_ms(30);                                   
0299:  MOVLW  1E
029A:  MOVWF  33
029B:  CALL   064
....................   set_pwm1_duty(pvm);  
029C:  MOVF   27,W
029D:  MOVWF  15
....................   lcd_gotoxy(1,1); 
029E:  MOVLW  01
029F:  MOVWF  33
02A0:  MOVWF  34
02A1:  CALL   0EB
....................   printf(lcd_putc,"PWM=%03u"pvm);       
02A2:  CLRF   28
02A3:  MOVF   28,W
02A4:  CALL   044
02A5:  INCF   28,F
02A6:  MOVWF  77
02A7:  MOVWF  32
02A8:  CALL   10E
02A9:  MOVLW  04
02AA:  SUBWF  28,W
02AB:  BTFSS  03.2
02AC:  GOTO   2A3
02AD:  MOVF   27,W
02AE:  MOVWF  29
02AF:  MOVLW  03
02B0:  MOVWF  2A
02B1:  GOTO   14B
....................   delay_ms(30);  
02B2:  MOVLW  1E
02B3:  MOVWF  33
02B4:  CALL   064
....................   devir=0;                                 
02B5:  CLRF   23
02B6:  CLRF   22
....................  
....................    for(i=0;i<10;i++)    // bu kýsým 100 ms aralýklarla durdurma butonuna basýlýp basýlmadýðýný kontrol eder    
02B7:  CLRF   26
02B8:  MOVF   26,W
02B9:  SUBLW  09
02BA:  BTFSS  03.0
02BB:  GOTO   2C7
....................      {                  // bu arada  timer0 gelen palsleri sayar  
....................       delay_ms(100);  
02BC:  MOVLW  64
02BD:  MOVWF  33
02BE:  CALL   064
....................       if(input(pin_d6)==0) 
02BF:  BSF    03.5
02C0:  BSF    08.6
02C1:  BCF    03.5
02C2:  BTFSC  08.6
02C3:  GOTO   2C5
....................       {goto ana_p;}  
02C4:  GOTO   231
....................    } 
02C5:  INCF   26,F
02C6:  GOTO   2B8
....................  
....................   sayac=get_timer1();  
02C7:  MOVF   0F,W
02C8:  MOVWF  7A
02C9:  MOVF   0E,W
02CA:  MOVWF  77
02CB:  MOVF   0F,W
02CC:  SUBWF  7A,W
02CD:  BTFSS  03.2
02CE:  GOTO   2C7
02CF:  MOVF   77,W
02D0:  MOVWF  24
02D1:  MOVF   7A,W
02D2:  MOVWF  25
....................   devir=sayac;                              
02D3:  MOVF   25,W
02D4:  MOVWF  23
02D5:  MOVF   24,W
02D6:  MOVWF  22
....................   devir=devir*60;                          
02D7:  MOVF   23,W
02D8:  MOVWF  29
02D9:  MOVF   22,W
02DA:  MOVWF  28
02DB:  CLRF   2B
02DC:  MOVLW  3C
02DD:  MOVWF  2A
02DE:  GOTO   182
02DF:  MOVF   79,W
02E0:  MOVWF  23
02E1:  MOVF   78,W
02E2:  MOVWF  22
....................   lcd_gotoxy(1,2);                           
02E3:  MOVLW  01
02E4:  MOVWF  33
02E5:  MOVLW  02
02E6:  MOVWF  34
02E7:  CALL   0EB
....................   printf(lcd_putc,"devir=%05lud/d",devir); 
02E8:  CLRF   28
02E9:  MOVF   28,W
02EA:  CALL   051
02EB:  INCF   28,F
02EC:  MOVWF  77
02ED:  MOVWF  32
02EE:  CALL   10E
02EF:  MOVLW  06
02F0:  SUBWF  28,W
02F1:  BTFSS  03.2
02F2:  GOTO   2E9
02F3:  MOVLW  08
02F4:  MOVWF  04
02F5:  MOVF   23,W
02F6:  MOVWF  2A
02F7:  MOVF   22,W
02F8:  MOVWF  29
02F9:  GOTO   199
02FA:  MOVLW  64
02FB:  MOVWF  32
02FC:  CALL   10E
02FD:  MOVLW  2F
02FE:  MOVWF  32
02FF:  CALL   10E
0300:  MOVLW  64
0301:  MOVWF  32
0302:  CALL   10E
....................  } 
0303:  GOTO   294
.................... } 
....................                                                                                                                                   
0304:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT NOPROTECT BROWNOUT NOLVP NOCPD NOWRT NODEBUG
