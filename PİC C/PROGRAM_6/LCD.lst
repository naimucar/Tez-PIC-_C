CCS PCM C Compiler, Version 4.038, 62930               01-Haz-08 19:27

               Filename: C:\OKUL\TEZ\PÝC C\PROGRAM_6\LCD.lst

               ROM used: 378 words (5%)
                         Largest free fragment is 2048
               RAM used: 9 (2%) at main() level
                         19 (5%) worst case
               Stack:    5 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   13C
0003:  NOP
.................... #include<16f877.h>   
.................... //////// Standard Header file for the PIC16F877 device //////////////// 
.................... #device PIC16F877 
.................... #list 
....................  
.................... #use delay(clock=4000000) 
*
001E:  MOVLW  25
001F:  MOVWF  04
0020:  BCF    03.7
0021:  MOVF   00,W
0022:  BTFSC  03.2
0023:  GOTO   032
0024:  MOVLW  01
0025:  MOVWF  78
0026:  CLRF   77
0027:  DECFSZ 77,F
0028:  GOTO   027
0029:  DECFSZ 78,F
002A:  GOTO   026
002B:  MOVLW  4A
002C:  MOVWF  77
002D:  DECFSZ 77,F
002E:  GOTO   02D
002F:  GOTO   030
0030:  DECFSZ 00,F
0031:  GOTO   024
0032:  RETLW  00
.................... #include<lcd420.C>               //lcd dosyasýný tanýmla 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #byte lcd = 6                        // This puts the entire structure 
....................                                      // on to port B (at address 6) 
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_b(LCD_READ); 
*
0040:  MOVLW  F0
0041:  BSF    03.5
0042:  MOVWF  06
....................       lcd.rw = 1; 
0043:  BCF    03.5
0044:  BSF    06.2
....................       delay_cycles(1); 
0045:  NOP
....................       lcd.enable = 1; 
0046:  BSF    06.0
....................       delay_cycles(1); 
0047:  NOP
....................       high = lcd.data; 
0048:  MOVF   06,W
0049:  SWAPF  06,W
004A:  ANDLW  0F
004B:  MOVWF  2B
....................       lcd.enable = 0; 
004C:  BCF    06.0
....................       delay_cycles(1); 
004D:  NOP
....................       lcd.enable = 1; 
004E:  BSF    06.0
....................       delay_us(1); 
004F:  NOP
....................       low = lcd.data; 
0050:  MOVF   06,W
0051:  SWAPF  06,W
0052:  ANDLW  0F
0053:  MOVWF  2A
....................       lcd.enable = 0; 
0054:  BCF    06.0
....................       set_tris_b(LCD_WRITE); 
0055:  MOVLW  00
0056:  BSF    03.5
0057:  MOVWF  06
....................       return( (high<<4) | low); 
0058:  BCF    03.5
0059:  SWAPF  2B,W
005A:  MOVWF  77
005B:  MOVLW  F0
005C:  ANDWF  77,F
005D:  MOVF   77,W
005E:  IORWF  2A,W
005F:  MOVWF  78
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
0033:  SWAPF  2B,W
0034:  ANDLW  F0
0035:  MOVWF  77
0036:  MOVLW  0F
0037:  ANDWF  06,W
0038:  IORWF  77,W
0039:  MOVWF  06
....................       delay_cycles(1); 
003A:  NOP
....................       lcd.enable = 1; 
003B:  BSF    06.0
....................       delay_us(2); 
003C:  GOTO   03D
....................       lcd.enable = 0; 
003D:  BCF    06.0
.................... } 
003E:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
003F:  BCF    06.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
*
0060:  MOVF   78,W
0061:  MOVWF  2A
0062:  BTFSC  2A.7
0063:  GOTO   040
....................       lcd.rs = address; 
0064:  BTFSS  28.0
0065:  BCF    06.1
0066:  BTFSC  28.0
0067:  BSF    06.1
....................       delay_cycles(1); 
0068:  NOP
....................       lcd.rw = 0; 
0069:  BCF    06.2
....................       delay_cycles(1); 
006A:  NOP
....................       lcd.enable = 0; 
006B:  BCF    06.0
....................       lcd_send_nibble(n >> 4); 
006C:  SWAPF  29,W
006D:  MOVWF  2A
006E:  MOVLW  0F
006F:  ANDWF  2A,F
0070:  MOVF   2A,W
0071:  MOVWF  2B
0072:  CALL   033
....................       lcd_send_nibble(n & 0xf); 
0073:  MOVF   29,W
0074:  ANDLW  0F
0075:  MOVWF  2A
0076:  MOVWF  2B
0077:  CALL   033
.................... } 
0078:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_b(LCD_WRITE); 
0079:  MOVLW  00
007A:  BSF    03.5
007B:  MOVWF  06
....................     lcd.rs = 0; 
007C:  BCF    03.5
007D:  BCF    06.1
....................     lcd.rw = 0; 
007E:  BCF    06.2
....................     lcd.enable = 0; 
007F:  BCF    06.0
....................     delay_ms(15); 
0080:  MOVLW  0F
0081:  MOVWF  25
0082:  CALL   01E
....................     for(i=1;i<=3;++i) { 
0083:  MOVLW  01
0084:  MOVWF  22
0085:  MOVF   22,W
0086:  SUBLW  03
0087:  BTFSS  03.0
0088:  GOTO   091
....................        lcd_send_nibble(3); 
0089:  MOVLW  03
008A:  MOVWF  2B
008B:  CALL   033
....................        delay_ms(5); 
008C:  MOVLW  05
008D:  MOVWF  25
008E:  CALL   01E
....................     } 
008F:  INCF   22,F
0090:  GOTO   085
....................     lcd_send_nibble(2); 
0091:  MOVLW  02
0092:  MOVWF  2B
0093:  CALL   033
....................     for(i=0;i<=3;++i) 
0094:  CLRF   22
0095:  MOVF   22,W
0096:  SUBLW  03
0097:  BTFSS  03.0
0098:  GOTO   0A2
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
0099:  MOVF   22,W
009A:  CALL   004
009B:  MOVWF  23
009C:  CLRF   28
009D:  MOVF   23,W
009E:  MOVWF  29
009F:  CALL   03F
00A0:  INCF   22,F
00A1:  GOTO   095
.................... } 
00A2:  BCF    0A.3
00A3:  BCF    0A.4
00A4:  GOTO   14A (RETURN)
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
00A5:  MOVLW  01
00A6:  SUBWF  26,W
00A7:  ADDLW  FC
00A8:  BTFSC  03.0
00A9:  GOTO   0B8
00AA:  ADDLW  04
00AB:  GOTO   0C0
....................      case 1 : address=0x80;break; 
00AC:  MOVLW  80
00AD:  MOVWF  27
00AE:  GOTO   0B8
....................      case 2 : address=0xc0;break; 
00AF:  MOVLW  C0
00B0:  MOVWF  27
00B1:  GOTO   0B8
....................      case 3 : address=0x94;break; 
00B2:  MOVLW  94
00B3:  MOVWF  27
00B4:  GOTO   0B8
....................      case 4 : address=0xd4;break; 
00B5:  MOVLW  D4
00B6:  MOVWF  27
00B7:  GOTO   0B8
....................    } 
....................    address+=x-1; 
00B8:  MOVLW  01
00B9:  SUBWF  25,W
00BA:  ADDWF  27,F
....................    lcd_send_byte(0,address); 
00BB:  CLRF   28
00BC:  MOVF   27,W
00BD:  MOVWF  29
00BE:  CALL   03F
.................... } 
00BF:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
*
00C8:  MOVF   24,W
00C9:  XORLW  0C
00CA:  BTFSC  03.2
00CB:  GOTO   0D3
00CC:  XORLW  06
00CD:  BTFSC  03.2
00CE:  GOTO   0DD
00CF:  XORLW  02
00D0:  BTFSC  03.2
00D1:  GOTO   0E4
00D2:  GOTO   0E9
....................      case '\f'   : lcd_send_byte(0,1); 
00D3:  CLRF   28
00D4:  MOVLW  01
00D5:  MOVWF  29
00D6:  CALL   03F
....................                    lcdline=1; 
00D7:  MOVLW  01
00D8:  MOVWF  20
....................                    delay_ms(2); 
00D9:  MOVLW  02
00DA:  MOVWF  25
00DB:  CALL   01E
....................                                            break; 
00DC:  GOTO   0EF
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
00DD:  INCF   20,F
00DE:  MOVLW  01
00DF:  MOVWF  25
00E0:  MOVF   20,W
00E1:  MOVWF  26
00E2:  CALL   0A5
00E3:  GOTO   0EF
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
00E4:  CLRF   28
00E5:  MOVLW  10
00E6:  MOVWF  29
00E7:  CALL   03F
00E8:  GOTO   0EF
....................      default     : lcd_send_byte(1,c);     break; 
00E9:  MOVLW  01
00EA:  MOVWF  28
00EB:  MOVF   24,W
00EC:  MOVWF  29
00ED:  CALL   03F
00EE:  GOTO   0EF
....................    } 
.................... } 
00EF:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... void main() 
.................... {  
*
013C:  CLRF   04
013D:  BCF    03.7
013E:  MOVLW  1F
013F:  ANDWF  03,F
0140:  BSF    03.5
0141:  BSF    1F.0
0142:  BSF    1F.1
0143:  BSF    1F.2
0144:  BCF    1F.3
....................  unsigned int8 i; 
....................  delay_ms(100); 
0145:  MOVLW  64
0146:  BCF    03.5
0147:  MOVWF  25
0148:  CALL   01E
....................  lcd_init();                     // lcd yi hazýrla 
0149:  GOTO   079
....................  delay_ms(100); 
014A:  MOVLW  64
014B:  MOVWF  25
014C:  CALL   01E
....................  lcd_putc("\f");                 // ekraný siler kursörü 1,1 e çek  
014D:  CLRF   22
014E:  MOVF   22,W
014F:  CALL   00C
0150:  IORLW  00
0151:  BTFSC  03.2
0152:  GOTO   157
0153:  INCF   22,F
0154:  MOVWF  24
0155:  CALL   0C8
0156:  GOTO   14E
....................  lcd_putc("MERHABA");            //ekrana MERHABA yaz 
0157:  CLRF   22
0158:  MOVF   22,W
0159:  CALL   012
015A:  IORLW  00
015B:  BTFSC  03.2
015C:  GOTO   161
015D:  INCF   22,F
015E:  MOVWF  24
015F:  CALL   0C8
0160:  GOTO   158
....................  for(;;)                         //sonsuz döngü 
....................  {                               
....................    for(i=0 ; i<255 ;++i) 
0161:  CLRF   21
0162:  INCFSZ 21,W
0163:  GOTO   165
0164:  GOTO   178
....................    {                               
....................       lcd_gotoxy(1,2);           //lcd de 2. satýr 1 sütuna git                       
0165:  MOVLW  01
0166:  MOVWF  25
0167:  MOVLW  02
0168:  MOVWF  26
0169:  CALL   0A5
....................       printf(lcd_putc "%3u",i); //"i" deðerini 3 haneli olarak pozitif 8 bit desimal olarak göster 
016A:  MOVF   21,W
016B:  MOVWF  22
016C:  MOVLW  13
016D:  MOVWF  23
016E:  GOTO   105
....................       delay_ms(300);               
016F:  MOVLW  02
0170:  MOVWF  22
0171:  MOVLW  96
0172:  MOVWF  25
0173:  CALL   01E
0174:  DECFSZ 22,F
0175:  GOTO   171
....................    } 
0176:  INCF   21,F
0177:  GOTO   162
....................  } 
0178:  GOTO   161
....................   
.................... }                         
0179:  SLEEP

Configuration Fuses:
   Word  1: 3F73   RC NOWDT PUT NOPROTECT BROWNOUT NOLVP NOCPD NOWRT NODEBUG
