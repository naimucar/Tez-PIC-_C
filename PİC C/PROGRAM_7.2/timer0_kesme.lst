CCS PCM C Compiler, Version 4.038, 62930               18-May-08 08:41

               Filename: C:\OKUL\TEZ\PÝC C\PROGRAM_7.2\timer0_kesme.lst

               ROM used: 530 words (6%)
                         Largest free fragment is 2048
               RAM used: 20 (5%) at main() level
                         41 (11%) worst case
               Stack:    9 worst case (4 in main + 5 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   170
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  BTFSS  0B.5
001A:  GOTO   01D
001B:  BTFSC  0B.2
001C:  GOTO   030
001D:  MOVF   22,W
001E:  MOVWF  04
001F:  MOVF   23,W
0020:  MOVWF  77
0021:  MOVF   24,W
0022:  MOVWF  78
0023:  MOVF   25,W
0024:  MOVWF  79
0025:  MOVF   26,W
0026:  MOVWF  7A
0027:  MOVF   27,W
0028:  MOVWF  7B
0029:  MOVF   20,W
002A:  MOVWF  0A
002B:  SWAPF  21,W
002C:  MOVWF  03
002D:  SWAPF  7F,F
002E:  SWAPF  7F,W
002F:  RETFIE
0030:  BCF    0A.3
0031:  BCF    0A.4
0032:  GOTO   11E
.................... #include<16f877.h> 
.................... //////// Standard Header file for the PIC16F877 device //////////////// 
.................... #device PIC16F877 
.................... #list 
....................  
.................... #fuses xt,noprotect,nowdt 
.................... #use delay(clock=4000000)  
*
00CC:  MOVLW  3B
00CD:  MOVWF  04
00CE:  BCF    03.7
00CF:  MOVF   00,W
00D0:  BTFSC  03.2
00D1:  GOTO   0E0
00D2:  MOVLW  01
00D3:  MOVWF  78
00D4:  CLRF   77
00D5:  DECFSZ 77,F
00D6:  GOTO   0D5
00D7:  DECFSZ 78,F
00D8:  GOTO   0D4
00D9:  MOVLW  4A
00DA:  MOVWF  77
00DB:  DECFSZ 77,F
00DC:  GOTO   0DB
00DD:  GOTO   0DE
00DE:  DECFSZ 00,F
00DF:  GOTO   0D2
00E0:  RETLW  00
.................... #include<lcd420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #byte lcd = 6                        // This puts the entire structure 
....................                                      // on to port B (at address 6) 
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_b(LCD_READ); 
*
0061:  MOVLW  F0
0062:  BSF    03.5
0063:  MOVWF  06
....................       lcd.rw = 1; 
0064:  BCF    03.5
0065:  BSF    06.2
....................       delay_cycles(1); 
0066:  NOP
....................       lcd.enable = 1; 
0067:  BSF    06.0
....................       delay_cycles(1); 
0068:  NOP
....................       high = lcd.data; 
0069:  MOVF   06,W
006A:  SWAPF  06,W
006B:  ANDLW  0F
006C:  MOVWF  41
....................       lcd.enable = 0; 
006D:  BCF    06.0
....................       delay_cycles(1); 
006E:  NOP
....................       lcd.enable = 1; 
006F:  BSF    06.0
....................       delay_us(1); 
0070:  NOP
....................       low = lcd.data; 
0071:  MOVF   06,W
0072:  SWAPF  06,W
0073:  ANDLW  0F
0074:  MOVWF  40
....................       lcd.enable = 0; 
0075:  BCF    06.0
....................       set_tris_b(LCD_WRITE); 
0076:  MOVLW  00
0077:  BSF    03.5
0078:  MOVWF  06
....................       return( (high<<4) | low); 
0079:  BCF    03.5
007A:  SWAPF  41,W
007B:  MOVWF  77
007C:  MOVLW  F0
007D:  ANDWF  77,F
007E:  MOVF   77,W
007F:  IORWF  40,W
0080:  MOVWF  78
.................... } 
0081:  RETLW  00
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
0082:  SWAPF  41,W
0083:  ANDLW  F0
0084:  MOVWF  77
0085:  MOVLW  0F
0086:  ANDWF  06,W
0087:  IORWF  77,W
0088:  MOVWF  06
....................       delay_cycles(1); 
0089:  NOP
....................       lcd.enable = 1; 
008A:  BSF    06.0
....................       delay_us(2); 
008B:  GOTO   08C
....................       lcd.enable = 0; 
008C:  BCF    06.0
.................... } 
008D:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
008E:  BCF    06.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
008F:  CALL   061
0090:  MOVF   78,W
0091:  MOVWF  40
0092:  BTFSC  40.7
0093:  GOTO   08F
....................       lcd.rs = address; 
0094:  BTFSS  3E.0
0095:  BCF    06.1
0096:  BTFSC  3E.0
0097:  BSF    06.1
....................       delay_cycles(1); 
0098:  NOP
....................       lcd.rw = 0; 
0099:  BCF    06.2
....................       delay_cycles(1); 
009A:  NOP
....................       lcd.enable = 0; 
009B:  BCF    06.0
....................       lcd_send_nibble(n >> 4); 
009C:  SWAPF  3F,W
009D:  MOVWF  40
009E:  MOVLW  0F
009F:  ANDWF  40,F
00A0:  MOVF   40,W
00A1:  MOVWF  41
00A2:  CALL   082
....................       lcd_send_nibble(n & 0xf); 
00A3:  MOVF   3F,W
00A4:  ANDLW  0F
00A5:  MOVWF  40
00A6:  MOVWF  41
00A7:  CALL   082
.................... } 
00A8:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_b(LCD_WRITE); 
*
018D:  MOVLW  00
018E:  BSF    03.5
018F:  MOVWF  06
....................     lcd.rs = 0; 
0190:  BCF    03.5
0191:  BCF    06.1
....................     lcd.rw = 0; 
0192:  BCF    06.2
....................     lcd.enable = 0; 
0193:  BCF    06.0
0194:  CLRF   28
0195:  BTFSC  0B.7
0196:  BSF    28.7
0197:  BCF    0B.7
....................     delay_ms(15); 
0198:  MOVLW  0F
0199:  MOVWF  3B
019A:  CALL   0CC
019B:  BTFSC  28.7
019C:  BSF    0B.7
....................     for(i=1;i<=3;++i) { 
019D:  MOVLW  01
019E:  MOVWF  2D
019F:  MOVF   2D,W
01A0:  SUBLW  03
01A1:  BTFSS  03.0
01A2:  GOTO   1B7
01A3:  CLRF   28
01A4:  BTFSC  0B.7
01A5:  BSF    28.7
01A6:  BCF    0B.7
....................        lcd_send_nibble(3); 
01A7:  MOVLW  03
01A8:  MOVWF  41
01A9:  CALL   082
01AA:  BTFSC  28.7
01AB:  BSF    0B.7
01AC:  CLRF   28
01AD:  BTFSC  0B.7
01AE:  BSF    28.7
01AF:  BCF    0B.7
....................        delay_ms(5); 
01B0:  MOVLW  05
01B1:  MOVWF  3B
01B2:  CALL   0CC
01B3:  BTFSC  28.7
01B4:  BSF    0B.7
....................     } 
01B5:  INCF   2D,F
01B6:  GOTO   19F
01B7:  CLRF   28
01B8:  BTFSC  0B.7
01B9:  BSF    28.7
01BA:  BCF    0B.7
....................     lcd_send_nibble(2); 
01BB:  MOVLW  02
01BC:  MOVWF  41
01BD:  CALL   082
01BE:  BTFSC  28.7
01BF:  BSF    0B.7
....................     for(i=0;i<=3;++i) 
01C0:  CLRF   2D
01C1:  MOVF   2D,W
01C2:  SUBLW  03
01C3:  BTFSS  03.0
01C4:  GOTO   1D4
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
01C5:  MOVF   2D,W
01C6:  CALL   033
01C7:  MOVWF  2E
01C8:  CLRF   28
01C9:  BTFSC  0B.7
01CA:  BSF    28.7
01CB:  BCF    0B.7
01CC:  CLRF   3E
01CD:  MOVF   2E,W
01CE:  MOVWF  3F
01CF:  CALL   08E
01D0:  BTFSC  28.7
01D1:  BSF    0B.7
01D2:  INCF   2D,F
01D3:  GOTO   1C1
01D4:  CLRF   28
01D5:  BTFSC  0B.7
01D6:  BSF    28.7
01D7:  BCF    0B.7
.................... } 
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
*
00A9:  MOVLW  01
00AA:  SUBWF  3C,W
00AB:  ADDLW  FC
00AC:  BTFSC  03.0
00AD:  GOTO   0BC
00AE:  ADDLW  04
00AF:  GOTO   0C4
....................      case 1 : address=0x80;break; 
00B0:  MOVLW  80
00B1:  MOVWF  3D
00B2:  GOTO   0BC
....................      case 2 : address=0xc0;break; 
00B3:  MOVLW  C0
00B4:  MOVWF  3D
00B5:  GOTO   0BC
....................      case 3 : address=0x94;break; 
00B6:  MOVLW  94
00B7:  MOVWF  3D
00B8:  GOTO   0BC
....................      case 4 : address=0xd4;break; 
00B9:  MOVLW  D4
00BA:  MOVWF  3D
00BB:  GOTO   0BC
....................    } 
....................    address+=x-1; 
00BC:  MOVLW  01
00BD:  SUBWF  3B,W
00BE:  ADDWF  3D,F
....................    lcd_send_byte(0,address); 
00BF:  CLRF   3E
00C0:  MOVF   3D,W
00C1:  MOVWF  3F
00C2:  CALL   08E
.................... } 
00C3:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
*
00E1:  MOVF   3A,W
00E2:  XORLW  0C
00E3:  BTFSC  03.2
00E4:  GOTO   0EC
00E5:  XORLW  06
00E6:  BTFSC  03.2
00E7:  GOTO   0F6
00E8:  XORLW  02
00E9:  BTFSC  03.2
00EA:  GOTO   0FD
00EB:  GOTO   102
....................      case '\f'   : lcd_send_byte(0,1); 
00EC:  CLRF   3E
00ED:  MOVLW  01
00EE:  MOVWF  3F
00EF:  CALL   08E
....................                    lcdline=1; 
00F0:  MOVLW  01
00F1:  MOVWF  29
....................                    delay_ms(2); 
00F2:  MOVLW  02
00F3:  MOVWF  3B
00F4:  CALL   0CC
....................                                            break; 
00F5:  GOTO   108
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
00F6:  INCF   29,F
00F7:  MOVLW  01
00F8:  MOVWF  3B
00F9:  MOVF   29,W
00FA:  MOVWF  3C
00FB:  CALL   0A9
00FC:  GOTO   108
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
00FD:  CLRF   3E
00FE:  MOVLW  10
00FF:  MOVWF  3F
0100:  CALL   08E
0101:  GOTO   108
....................      default     : lcd_send_byte(1,c);     break; 
0102:  MOVLW  01
0103:  MOVWF  3E
0104:  MOVF   3A,W
0105:  MOVWF  3F
0106:  CALL   08E
0107:  GOTO   108
....................    } 
.................... } 
0108:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
....................  int sayac=0,sayac1=0,x; 
*
0179:  BCF    03.5
017A:  CLRF   2A
017B:  CLRF   2B
....................  
.................... #int_timer0                          //timer0 kesmesini aktif et 
.................... void timer0_kesmesi()                 
.................... {set_timer0(255);                    // timer0 deðeri 255 iken set olsun  
*
011E:  MOVLW  FF
011F:  MOVWF  01
.................... sayac++;  
0120:  INCF   2A,F
.................... lcd_gotoxy(1,2);  
0121:  MOVLW  01
0122:  MOVWF  3B
0123:  MOVLW  02
0124:  MOVWF  3C
0125:  CALL   0A9
.................... printf(lcd_putc,"sayac=%03u",sayac); 
0126:  CLRF   37
0127:  MOVF   37,W
0128:  CALL   03B
0129:  INCF   37,F
012A:  MOVWF  77
012B:  MOVF   77,W
012C:  MOVWF  3A
012D:  CALL   0E1
012E:  MOVLW  06
012F:  SUBWF  37,W
0130:  BTFSS  03.2
0131:  GOTO   127
0132:  MOVF   2A,W
0133:  MOVWF  38
0134:  MOVLW  03
0135:  MOVWF  39
.................... delay_ms(20); 
*
0169:  MOVLW  14
016A:  MOVWF  3B
016B:  CALL   0CC
.................... } 
....................  
016C:  BCF    0B.2
016D:  BCF    0A.3
016E:  BCF    0A.4
016F:  GOTO   01D
.................... void main() 
.................... { 
0170:  CLRF   04
0171:  BCF    03.7
0172:  MOVLW  1F
0173:  ANDWF  03,F
0174:  BSF    03.5
0175:  BSF    1F.0
0176:  BSF    1F.1
0177:  BSF    1F.2
0178:  BCF    1F.3
.................... set_tris_b(0x0); 
*
017C:  MOVLW  00
017D:  BSF    03.5
017E:  MOVWF  06
.................... output_b(0x0); 
017F:  CLRF   06
0180:  BCF    03.5
0181:  CLRF   06
.................... setup_timer_0(rtcc_ext_h_to_l|rtcc_div_1);  
0182:  BSF    03.5
0183:  MOVF   01,W
0184:  ANDLW  C7
0185:  IORLW  38
0186:  MOVWF  01
.................... // timer ayarý(düþen kenarda tetikle,bölme oraný 1 dir. )bölme oraný:gelen sinyalin kaç kerede alýnacaðýný belirtir   
.................... // örneðin rtcc_div_2 olsaydý butona 2 kere basýlýnca 1 deðer yükselecekti 
....................  
.................... set_timer0(255);                  // bu deðeri hem yukarýda hem bu dizinde göstermek zorundayýz. 
0187:  MOVLW  FF
0188:  BCF    03.5
0189:  MOVWF  01
.................... enable_interrupts(GLOBAL);        //kesmelere izin ver 
018A:  MOVLW  C0
018B:  IORWF  0B,F
.................... enable_interrupts(INT_TIMER0);    //timer1 kesmesini aktif et 
018C:  BSF    0B.5
.................... lcd_init(); 
.................... delay_ms(10); 
*
01D8:  MOVLW  0A
01D9:  MOVWF  3B
01DA:  CALL   0CC
01DB:  BTFSC  28.7
01DC:  BSF    0B.7
.................... lcd_putc("\f"); 
01DD:  CLRF   2D
01DE:  MOVF   2D,W
01DF:  CALL   04A
01E0:  IORLW  00
01E1:  BTFSC  03.2
01E2:  GOTO   1ED
01E3:  INCF   2D,F
01E4:  CLRF   28
01E5:  BTFSC  0B.7
01E6:  BSF    28.7
01E7:  BCF    0B.7
01E8:  MOVWF  3A
01E9:  CALL   0E1
01EA:  BTFSC  28.7
01EB:  BSF    0B.7
01EC:  GOTO   1DE
01ED:  CLRF   28
01EE:  BTFSC  0B.7
01EF:  BSF    28.7
01F0:  BCF    0B.7
.................... delay_ms(10); 
01F1:  MOVLW  0A
01F2:  MOVWF  3B
01F3:  CALL   0CC
01F4:  BTFSC  28.7
01F5:  BSF    0B.7
01F6:  CLRF   28
01F7:  BTFSC  0B.7
01F8:  BSF    28.7
01F9:  BCF    0B.7
.................... lcd_gotoxy(1,1); 
01FA:  MOVLW  01
01FB:  MOVWF  3B
01FC:  MOVWF  3C
01FD:  CALL   0A9
01FE:  BTFSC  28.7
01FF:  BSF    0B.7
.................... lcd_putc("timer0 deger"); 
0200:  CLRF   2D
0201:  MOVF   2D,W
0202:  CALL   050
0203:  IORLW  00
0204:  BTFSC  03.2
0205:  GOTO   210
0206:  INCF   2D,F
0207:  CLRF   28
0208:  BTFSC  0B.7
0209:  BSF    28.7
020A:  BCF    0B.7
020B:  MOVWF  3A
020C:  CALL   0E1
020D:  BTFSC  28.7
020E:  BSF    0B.7
020F:  GOTO   201
.................... while(1); 
0210:  GOTO   210
.................... } 
....................  
....................  
....................  
0211:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT NOPROTECT BROWNOUT NOLVP NOCPD NOWRT NODEBUG
