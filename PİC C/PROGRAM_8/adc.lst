CCS PCM C Compiler, Version 4.038, 62930               18-May-08 08:42

               Filename: C:\OKUL\TEZ\PÝC C\PROGRAM_8\adc.lst

               ROM used: 455 words (6%)
                         Largest free fragment is 2048
               RAM used: 10 (3%) at main() level
                         28 (8%) worst case
               Stack:    5 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   160
0003:  NOP
.................... #include<16f877.h> 
.................... //////// Standard Header file for the PIC16F877 device //////////////// 
.................... #device PIC16F877 
.................... #list 
....................  
.................... #fuses nowdt,xt 
.................... #use delay(clock=4000000) 
*
0029:  MOVLW  2E
002A:  MOVWF  04
002B:  BCF    03.7
002C:  MOVF   00,W
002D:  BTFSC  03.2
002E:  GOTO   03D
002F:  MOVLW  01
0030:  MOVWF  78
0031:  CLRF   77
0032:  DECFSZ 77,F
0033:  GOTO   032
0034:  DECFSZ 78,F
0035:  GOTO   031
0036:  MOVLW  4A
0037:  MOVWF  77
0038:  DECFSZ 77,F
0039:  GOTO   038
003A:  GOTO   03B
003B:  DECFSZ 00,F
003C:  GOTO   02F
003D:  RETLW  00
.................... #include<lcd420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #byte lcd = 6                        // This puts the entire structure 
....................                                      // on to port B (at address 6) 
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_b(LCD_READ); 
*
004B:  MOVLW  F0
004C:  BSF    03.5
004D:  MOVWF  06
....................       lcd.rw = 1; 
004E:  BCF    03.5
004F:  BSF    06.2
....................       delay_cycles(1); 
0050:  NOP
....................       lcd.enable = 1; 
0051:  BSF    06.0
....................       delay_cycles(1); 
0052:  NOP
....................       high = lcd.data; 
0053:  MOVF   06,W
0054:  SWAPF  06,W
0055:  ANDLW  0F
0056:  MOVWF  34
....................       lcd.enable = 0; 
0057:  BCF    06.0
....................       delay_cycles(1); 
0058:  NOP
....................       lcd.enable = 1; 
0059:  BSF    06.0
....................       delay_us(1); 
005A:  NOP
....................       low = lcd.data; 
005B:  MOVF   06,W
005C:  SWAPF  06,W
005D:  ANDLW  0F
005E:  MOVWF  33
....................       lcd.enable = 0; 
005F:  BCF    06.0
....................       set_tris_b(LCD_WRITE); 
0060:  MOVLW  00
0061:  BSF    03.5
0062:  MOVWF  06
....................       return( (high<<4) | low); 
0063:  BCF    03.5
0064:  SWAPF  34,W
0065:  MOVWF  77
0066:  MOVLW  F0
0067:  ANDWF  77,F
0068:  MOVF   77,W
0069:  IORWF  33,W
006A:  MOVWF  78
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
003E:  SWAPF  34,W
003F:  ANDLW  F0
0040:  MOVWF  77
0041:  MOVLW  0F
0042:  ANDWF  06,W
0043:  IORWF  77,W
0044:  MOVWF  06
....................       delay_cycles(1); 
0045:  NOP
....................       lcd.enable = 1; 
0046:  BSF    06.0
....................       delay_us(2); 
0047:  GOTO   048
....................       lcd.enable = 0; 
0048:  BCF    06.0
.................... } 
0049:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
004A:  BCF    06.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
*
006B:  MOVF   78,W
006C:  MOVWF  33
006D:  BTFSC  33.7
006E:  GOTO   04B
....................       lcd.rs = address; 
006F:  BTFSS  31.0
0070:  BCF    06.1
0071:  BTFSC  31.0
0072:  BSF    06.1
....................       delay_cycles(1); 
0073:  NOP
....................       lcd.rw = 0; 
0074:  BCF    06.2
....................       delay_cycles(1); 
0075:  NOP
....................       lcd.enable = 0; 
0076:  BCF    06.0
....................       lcd_send_nibble(n >> 4); 
0077:  SWAPF  32,W
0078:  MOVWF  33
0079:  MOVLW  0F
007A:  ANDWF  33,F
007B:  MOVF   33,W
007C:  MOVWF  34
007D:  CALL   03E
....................       lcd_send_nibble(n & 0xf); 
007E:  MOVF   32,W
007F:  ANDLW  0F
0080:  MOVWF  33
0081:  MOVWF  34
0082:  CALL   03E
.................... } 
0083:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_b(LCD_WRITE); 
0084:  MOVLW  00
0085:  BSF    03.5
0086:  MOVWF  06
....................     lcd.rs = 0; 
0087:  BCF    03.5
0088:  BCF    06.1
....................     lcd.rw = 0; 
0089:  BCF    06.2
....................     lcd.enable = 0; 
008A:  BCF    06.0
....................     delay_ms(15); 
008B:  MOVLW  0F
008C:  MOVWF  2E
008D:  CALL   029
....................     for(i=1;i<=3;++i) { 
008E:  MOVLW  01
008F:  MOVWF  23
0090:  MOVF   23,W
0091:  SUBLW  03
0092:  BTFSS  03.0
0093:  GOTO   09C
....................        lcd_send_nibble(3); 
0094:  MOVLW  03
0095:  MOVWF  34
0096:  CALL   03E
....................        delay_ms(5); 
0097:  MOVLW  05
0098:  MOVWF  2E
0099:  CALL   029
....................     } 
009A:  INCF   23,F
009B:  GOTO   090
....................     lcd_send_nibble(2); 
009C:  MOVLW  02
009D:  MOVWF  34
009E:  CALL   03E
....................     for(i=0;i<=3;++i) 
009F:  CLRF   23
00A0:  MOVF   23,W
00A1:  SUBLW  03
00A2:  BTFSS  03.0
00A3:  GOTO   0AD
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
00A4:  MOVF   23,W
00A5:  CALL   004
00A6:  MOVWF  24
00A7:  CLRF   31
00A8:  MOVF   24,W
00A9:  MOVWF  32
00AA:  CALL   04A
00AB:  INCF   23,F
00AC:  GOTO   0A0
.................... } 
00AD:  BCF    0A.3
00AE:  BCF    0A.4
00AF:  GOTO   17F (RETURN)
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
00B0:  MOVLW  01
00B1:  SUBWF  2F,W
00B2:  ADDLW  FC
00B3:  BTFSC  03.0
00B4:  GOTO   0C3
00B5:  ADDLW  04
00B6:  GOTO   0CB
....................      case 1 : address=0x80;break; 
00B7:  MOVLW  80
00B8:  MOVWF  30
00B9:  GOTO   0C3
....................      case 2 : address=0xc0;break; 
00BA:  MOVLW  C0
00BB:  MOVWF  30
00BC:  GOTO   0C3
....................      case 3 : address=0x94;break; 
00BD:  MOVLW  94
00BE:  MOVWF  30
00BF:  GOTO   0C3
....................      case 4 : address=0xd4;break; 
00C0:  MOVLW  D4
00C1:  MOVWF  30
00C2:  GOTO   0C3
....................    } 
....................    address+=x-1; 
00C3:  MOVLW  01
00C4:  SUBWF  2E,W
00C5:  ADDWF  30,F
....................    lcd_send_byte(0,address); 
00C6:  CLRF   31
00C7:  MOVF   30,W
00C8:  MOVWF  32
00C9:  CALL   04A
.................... } 
00CA:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
*
00D3:  MOVF   2D,W
00D4:  XORLW  0C
00D5:  BTFSC  03.2
00D6:  GOTO   0DE
00D7:  XORLW  06
00D8:  BTFSC  03.2
00D9:  GOTO   0E8
00DA:  XORLW  02
00DB:  BTFSC  03.2
00DC:  GOTO   0EF
00DD:  GOTO   0F4
....................      case '\f'   : lcd_send_byte(0,1); 
00DE:  CLRF   31
00DF:  MOVLW  01
00E0:  MOVWF  32
00E1:  CALL   04A
....................                    lcdline=1; 
00E2:  MOVLW  01
00E3:  MOVWF  20
....................                    delay_ms(2); 
00E4:  MOVLW  02
00E5:  MOVWF  2E
00E6:  CALL   029
....................                                            break; 
00E7:  GOTO   0FA
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
00E8:  INCF   20,F
00E9:  MOVLW  01
00EA:  MOVWF  2E
00EB:  MOVF   20,W
00EC:  MOVWF  2F
00ED:  CALL   0B0
00EE:  GOTO   0FA
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
00EF:  CLRF   31
00F0:  MOVLW  10
00F1:  MOVWF  32
00F2:  CALL   04A
00F3:  GOTO   0FA
....................      default     : lcd_send_byte(1,c);     break; 
00F4:  MOVLW  01
00F5:  MOVWF  31
00F6:  MOVF   2D,W
00F7:  MOVWF  32
00F8:  CALL   04A
00F9:  GOTO   0FA
....................    } 
.................... } 
00FA:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
....................  
.................... unsigned long int bilgi=0; 
*
0169:  BCF    03.5
016A:  CLRF   21
016B:  CLRF   22
....................  
.................... void main() 
.................... {  
*
0160:  CLRF   04
0161:  BCF    03.7
0162:  MOVLW  1F
0163:  ANDWF  03,F
0164:  BSF    03.5
0165:  BSF    1F.0
0166:  BSF    1F.1
0167:  BSF    1F.2
0168:  BCF    1F.3
.................... set_tris_b(0x00); 
*
016C:  MOVLW  00
016D:  BSF    03.5
016E:  MOVWF  06
.................... output_b(0x00); 
016F:  CLRF   06
0170:  BCF    03.5
0171:  CLRF   06
.................... setup_adc(adc_clock_div_2);              //ADC ayarý clock sinyalini 2 ye böl 
0172:  BCF    1F.6
0173:  BCF    1F.7
0174:  BSF    03.5
0175:  BCF    1F.7
0176:  BCF    03.5
0177:  BSF    1F.0
.................... setup_adc_ports(all_analog);             //bütün anolog giriþler aktif 
0178:  BSF    03.5
0179:  BCF    1F.0
017A:  BCF    1F.1
017B:  BCF    1F.2
017C:  BCF    1F.3
.................... lcd_init();                               
017D:  BCF    03.5
017E:  GOTO   084
.................... delay_ms(20);   
017F:  MOVLW  14
0180:  MOVWF  2E
0181:  CALL   029
.................... lcd_gotoxy(1,1);  
0182:  MOVLW  01
0183:  MOVWF  2E
0184:  MOVWF  2F
0185:  CALL   0B0
.................... printf(lcd_putc,"\fADC KONTROL");        
0186:  CLRF   23
0187:  MOVF   23,W
0188:  CALL   00C
0189:  INCF   23,F
018A:  MOVWF  77
018B:  MOVWF  2D
018C:  CALL   0D3
018D:  MOVLW  0C
018E:  SUBWF  23,W
018F:  BTFSS  03.2
0190:  GOTO   187
.................... delay_ms(20);                                                                      
0191:  MOVLW  14
0192:  MOVWF  2E
0193:  CALL   029
....................  
.................... while(1)                                                        
.................... {                                      
.................... bilgi=0;                             
0194:  CLRF   22
0195:  CLRF   21
.................... set_adc_channel(0);                      //aktif ve ayar edilecek kanal 0(RA0) 
0196:  MOVLW  00
0197:  MOVWF  78
0198:  MOVF   1F,W
0199:  ANDLW  C7
019A:  IORWF  78,W
019B:  MOVWF  1F
.................... delay_us(50);                            //min 30 mikrosaniye gecikme verilmelidir  
019C:  MOVLW  10
019D:  MOVWF  77
019E:  DECFSZ 77,F
019F:  GOTO   19E
01A0:  NOP
.................... bilgi=read_adc();                        //ADC deðeri bilgi deðiþkenine atanýyor 
01A1:  BSF    1F.2
01A2:  BTFSC  1F.2
01A3:  GOTO   1A2
01A4:  MOVF   1E,W
01A5:  CLRF   22
01A6:  MOVWF  21
.................... delay_ms(500); 
01A7:  MOVLW  02
01A8:  MOVWF  23
01A9:  MOVLW  FA
01AA:  MOVWF  2E
01AB:  CALL   029
01AC:  DECFSZ 23,F
01AD:  GOTO   1A9
....................  lcd_gotoxy(1,2);  
01AE:  MOVLW  01
01AF:  MOVWF  2E
01B0:  MOVLW  02
01B1:  MOVWF  2F
01B2:  CALL   0B0
.................... printf(lcd_putc,"adc=%lu",bilgi);      //bilgi deðiþkenini lcd de göster 
01B3:  CLRF   23
01B4:  MOVF   23,W
01B5:  CALL   01D
01B6:  INCF   23,F
01B7:  MOVWF  77
01B8:  MOVWF  2D
01B9:  CALL   0D3
01BA:  MOVLW  04
01BB:  SUBWF  23,W
01BC:  BTFSS  03.2
01BD:  GOTO   1B4
01BE:  MOVLW  10
01BF:  MOVWF  04
01C0:  MOVF   22,W
01C1:  MOVWF  25
01C2:  MOVF   21,W
01C3:  MOVWF  24
01C4:  GOTO   0FB
....................                                         
.................... } 
01C5:  GOTO   194
.................... }                                                        
....................  
....................                                          
01C6:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT NOPROTECT BROWNOUT NOLVP NOCPD NOWRT NODEBUG
